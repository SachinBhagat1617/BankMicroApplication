<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/BankMS/src/main/java/com/ofss/BankMS/service/BankServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BankMS/src/main/java/com/ofss/BankMS/service/BankServiceImpl.java" />
              <option name="originalContent" value="package com.ofss.BankMS.service;&#10;&#10;import com.ofss.BankMS.DTO.BankRequestDTO;&#10;import com.ofss.BankMS.Repository.BankRepository;&#10;import com.ofss.BankMS.models.Bank;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class BankServiceImpl implements BankService{&#10;    private final BankRepository bankRepository;&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; getAllBanks() {&#10;        return bankRepository.findAll() != null ?&#10;                ResponseEntity.ok(bankRepository.findAll()) :&#10;                ResponseEntity.status(404).body(&quot;No banks found&quot;);&#10;    }&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; createBank(BankRequestDTO bank) {&#10;        Bank newBank = new Bank();&#10;        newBank.setBankName(bank.getBankName());&#10;        newBank.setBranchAddress(bank.getBranchAddress());&#10;        newBank.setIfscCode(bank.getIfscCode());&#10;        bankRepository.save(newBank);&#10;        return ResponseEntity.status(201).body(newBank);&#10;    }&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; getBankById(Long id) {&#10;        return bankRepository.findById(id).isPresent() ?&#10;                ResponseEntity.ok(bankRepository.findById(id).get()) :&#10;                ResponseEntity.status(404).body(&quot;Bank not found with id: &quot; + id);&#10;    }&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; updateBank(Long id, Bank bank) {&#10;        return bankRepository.findById(id).isPresent() ?&#10;                ResponseEntity.ok(bankRepository.save(bank)) :&#10;                ResponseEntity.status(404).body(&quot;Bank not found with id: &quot; + id);&#10;    }&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; deleteBank(Long id) {&#10;        if (bankRepository.findById(id).isPresent()) {&#10;            bankRepository.deleteById(id);&#10;            return ResponseEntity.ok(&quot;Bank deleted Successfully&quot;);&#10;        } else {&#10;            return ResponseEntity.status(404).body(&quot;Bank not found with id: &quot; + id);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; partialUpdateBank(Long id, Bank bank) {&#10;        Bank prevBank = bankRepository.findById(id).isPresent()?&#10;                bankRepository.findById(id).get():null;&#10;        if(prevBank==null){&#10;            return ResponseEntity.status(404).body(&quot;Bank not found with id: &quot; + id);&#10;        }&#10;        if(bank.getBankName()!=null){&#10;            prevBank.setBankName(bank.getBankName());&#10;        }&#10;        if(bank.getIfscCode()!=null){&#10;            prevBank.setIfscCode(bank.getIfscCode());&#10;        }&#10;        if(bank.getBranchAddress()!=null){&#10;            prevBank.setBranchAddress(bank.getBranchAddress());&#10;        }&#10;        bankRepository.save(prevBank);&#10;        return ResponseEntity.ok(prevBank);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ofss.BankMS.service;&#10;&#10;import com.ofss.BankMS.DTO.BankRequestDTO;&#10;import com.ofss.BankMS.Repository.BankRepository;&#10;import com.ofss.BankMS.models.Bank;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class BankServiceImpl implements BankService{&#10;    private final BankRepository bankRepository;&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; getAllBanks() {&#10;        return bankRepository.findAll() != null ?&#10;                ResponseEntity.ok(bankRepository.findAll()) :&#10;                ResponseEntity.status(404).body(&quot;No banks found&quot;);&#10;    }&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; createBank(BankRequestDTO bank) {&#10;        Bank newBank = new Bank();&#10;        newBank.setBankName(bank.getBankName());&#10;        newBank.setBranchAddress(bank.getBranchAddress());&#10;        newBank.setIfscCode(bank.getIfscCode());&#10;        bankRepository.save(newBank);&#10;        return ResponseEntity.status(201).body(newBank);&#10;    }&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; getBankById(Long id) {&#10;        return bankRepository.findById(id).isPresent() ?&#10;                ResponseEntity.ok(bankRepository.findById(id).get()) :&#10;                ResponseEntity.status(404).body(&quot;Bank not found with id: &quot; + id);&#10;    }&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; updateBank(Long id, Bank bank) {&#10;        return bankRepository.findById(id).isPresent() ?&#10;                ResponseEntity.ok(bankRepository.save(bank)) :&#10;                ResponseEntity.status(404).body(&quot;Bank not found with id: &quot; + id);&#10;    }&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; deleteBank(Long id) {&#10;        if (bankRepository.findById(id).isPresent()) {&#10;            bankRepository.deleteById(id);&#10;            return ResponseEntity.ok(&quot;Bank deleted Successfully&quot;);&#10;        } else {&#10;            return ResponseEntity.status(404).body(&quot;Bank not found with id: &quot; + id);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public ResponseEntity&lt;?&gt; partialUpdateBank(Long id, Bank bank) {&#10;        Bank prevBank = bankRepository.findById(id).isPresent()?&#10;                bankRepository.findById(id).get():null;&#10;        if(prevBank==null){&#10;            return ResponseEntity.status(404).body(&quot;Bank not found with id: &quot; + id);&#10;        }&#10;        if(bank.getBankName()!=null){&#10;            prevBank.setBankName(bank.getBankName());&#10;        }&#10;        if(bank.getIfscCode()!=null){&#10;            prevBank.setIfscCode(bank.getIfscCode());&#10;        }&#10;        if(bank.getBranchAddress()!=null){&#10;            prevBank.setBranchAddress(bank.getBranchAddress());&#10;        }&#10;        bankRepository.save(prevBank);&#10;        return ResponseEntity.ok(prevBank);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/BankMS/src/main/resources/insert_bank_micro_db.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BankMS/src/main/resources/insert_bank_micro_db.sql" />
              <option name="updatedContent" value="-- SQL script to insert dummy data into BANK_MICRO_DB&#10;INSERT INTO BANK_MICRO_DB (BANK_NAME, IFSC_CODE, BRANCH_NAME, BRANCH_ADDRESS) VALUES ('State Bank of India', 'SBIN0001234', 'MG Road', '123 MG Road, Mumbai');&#10;INSERT INTO BANK_MICRO_DB (BANK_NAME, IFSC_CODE, BRANCH_NAME, BRANCH_ADDRESS) VALUES ('HDFC Bank', 'HDFC0005678', 'Andheri', '456 Andheri West, Mumbai');&#10;INSERT INTO BANK_MICRO_DB (BANK_NAME, IFSC_CODE, BRANCH_NAME, BRANCH_ADDRESS) VALUES ('ICICI Bank', 'ICIC0009101', 'Bandra', '789 Bandra East, Mumbai');&#10;INSERT INTO BANK_MICRO_DB (BANK_NAME, IFSC_CODE, BRANCH_NAME, BRANCH_ADDRESS) VALUES ('Axis Bank', 'UTIB0002345', 'Powai', '101 Powai Lake, Mumbai');&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>